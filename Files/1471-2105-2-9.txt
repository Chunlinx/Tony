                    Background        Highthroughput DNA sequencing makes it economically        possible to produce very large sequence data sets in short        time periods With this technology it is now possible to do        experiments that were impossible only a couple of years        ago For example a series of landmark papers in the late        s and early s showed that microbial diversity        could be analyzed by sequencing S rDNAs from        environmental samples reviewed by     Giovannoni used        this approach to show that there is a cosmopolitan marine        bacterium designated SAR using  S rDNA sequences            Today it would be reasonable to perform the same        study with thousands of S rDNA sequences This        exponential increase in the size of sequence data sets        necessitates new computer tools        Here we introduce a Java program FastGroup that is        appropriate for comparing thousands of sequences to each        other and grouping them based on userdefined criteria        While FastGroup is optimized to dereplicate libraries of        S rDNA sequences it can easily be adapted to dereplicate        any protein or DNA sequence library                    Results and discussion                  Description of program and algorithms                      Overview of FastGroup program            Figure shows the FastGroup graphical user interface            GUI The GUI reflects the order in which operations            are carried out by the FastGroup program First            sequences are loaded into the program from a directory            of files eg seq or txt files or from a            FASTAformatted document The program trims the            sequences according to userdefined parameters and the            trimmed sequences are matched against each other and            grouped In the Grouping step the user can either            define a percent sequence identity PSI that will be            used to group the sequences together or a consecutive            number of mismatches MM that will prevent sequences            from grouping together both algorithms are described            below                                Trimming sequences            Sections of the input sequences containing            mismatched andor ambiguous bases must be removed or            they will prevent proper grouping To make trimming as            flexible as possible FastGroup can trim sequences in            three ways  a userspecified number of bases from            the  or  ends can be used the rest of the sequence            is discarded  sequence  or  of a defined site            can be removed or  sequence with ambiguous bases            ie Ns can be removed from the ends For the            latter two methods trimming criteria can be entered            separately for the  and  ends If a primer sequence            is specified the user may adjust the stringency of the            match by varying the PSI or MM parameter explained in            detail below                                Matching            Both algorithms initiate grouping by first finding a            window ie a short sequence that is shared between            the two sequences being compared Both the window size            and direction of matching eg  vs  are            specified by the user                                Overview of grouping step            When FastGroup is initiated the first sequence in            the library is trimmed and placed in a new group g            The second sequence in the library is then trimmed and            compared against the sequence in g If the two            sequences are determined to be similar as defined by            the userderived matching and grouping criteria both            sequences are placed in group g If the sequences are            not similar the first sequence is placed into g and            the second sequence is placed into a new group g The            next sequence in the input library is then retrieved            trimmed and compared against the sequences in the            groups This process is repeated with every sequence in            the library until all sequences belong to a group New            groups are created as necessary Sequences in groups            are Targets A sequence being compared to the Targets            is a Query sequence It is important to note that the            first sequence used to create a group is the sequence            used for comparison against all subsequent sequences            The name for each group begins with g where the             is assigned sequentially as groups are found by the            program After the hyphen the name of the first            sequence put into the group is given                                Percent Sequence Identity PSI algorithm            The PSI algorithm starts at the first position after            the matching window and compares each base in the Query            sequence to that of the Target sequence This is done            in sequential order and at each position the algorithm            records if the bases match This process is repeated            through the length of the smaller sequence The PSI is            calculated by dividing the number of bases found to be            the same in both sequences by the number of bases in            the smaller sequence If two sequences have a percent            sequence identity that is greater than or equal to the            value entered by the user into the Percent Sequence            Identity window then the Query sequence is added to a            Target sequence group                                Mismatching MM algorithm            The MM algorithm starts at the first position after            the matching window and compares the bases in the Query            sequence to the Target If these two bases are the            same the program moves on to the next pair If the            bases are not equal a one base pair gap is inserted            into the Query sequence effectively sliding the Query            sequence relative to the Target sequence The base in            the Query sequence is then compared to the newly            aligned Target base If the bases match the algorithm            leaves the gap and moves to the next base for            comparison If the bases do not match the gap in the            Query sequence is removed and a gap is placed in the            Target sequence The newly aligned bases are then            checked If they are the same the program moves to the            next base in both sequences However if the gap in the            Target sequence does not cause the bases to pair this            is considered one mismatch If the userdefined MM is             the sequences will not be grouped If a  base            MM is assigned the algorithm will also try using this            size of the gap in both the Target and Query sequence            after initially using a  base gap This algorithm is            essentially the same as bounded diagonal band alignment                                               Output files            Once all sequences in a data set have been analyzed            by FastGroup five output text files are produced The            fastagroupstxt output file contains the group name            and a representative sequence from each group in FASTA            format The fastagroupstxt file is particularly            useful for subsequent Clustal X Clustal X Help            httpwwwigbmcustrasbgfrBioInfoClustalXTophtml                 and BLAST analyses BLAST            httpwwwncbinlmnihgovBLAST     The second            output file groupseqstxt contains the group name            and all sequences from the group This file is most            useful for visual confirmation of groupings The third            output file groupfilestxt contains the group name            name of each sequence in the group and the percent            that each group makes of the total The fourth output            file coveragetxt shows how many sequences are in            each group and calculates coverage by the method of            Good     Finally the infiletxt file contains all            the user specified parameters for a record of the            analysis                                    Testing of FastGroup          The library used to test FastGroup consisted of           bacterial S rDNA obtained from an environmental sample          The library was made by PCR amplifying with the          bacterialspecific primers BactF and BactR cloning          into a plasmid vector and then sequencing the inserts          using the BactF primer Figure  All sequences were          singlepass and unedited          A number of factors were considered when designing an          approach for dereplicating S rDNA libraries First          miscalled bases would prevent related sequences from          grouping together To remove these bases it was assumed          that  miscalled and ambiguous bases occur together          ie the presence of Ns could be used to differentiate          bad sequence and  as you move  of the sequencing          primer miscalled and ambiguous bases become more          prevalent especially beyond  bp Therefore trimming          criteria that remove  sequence are necessary A second          factor influencing our trimming strategy arises from the          fact that FastGroup must find a window in common between          two sequences before it starts the grouping algorithm          Therefore a conserved region at the matching end would          be expected to increase analysis speed For bacterial S          rDNAs Figure  sequenced using BactF the Bact          conserved site is ideal because  the Bact site is          highly conserved and should be easy to find in most          bacterial S rDNA sequences  the site is  bp away          from the sequencing primer therefore sequence  of this          site should be good quality and  the Bact site is          just  of the V region This final point is important          because the V region is highly variable and usually          contains information sufficient to differentiate between          different bacterial species Therefore including the V          region increases the resolving power of this approach for          measuring bacterial diversity                          Analyses of trimming and matching parameters          Our analysis strategy necessitated that the Bact          site be accurately identified in the S rDNA sequences          As shown in Table  if the Bact site must be          perfectly matched to be identified PSI for primer          matching    out of the  sequences  were          trimmed correctly If the PSI parameter for matching to          the Bact site was lowered to   out of the           sequences  were correctly trimmed However lowering          the detection stringency for the Bact site also          increased the possibility that false positive sites would          be detected resulting in prematurely trimmed sequences          False sites did not appear to be a problem with          PSI but lowering the PSI for finding the Bact          site to  did result in  false positives Table           Therefore for our data set using a  PSI for finding          the Bact site appeared optimal We specifically chose          a library of low quality sequences for the FastGroup          analyses Therefore the bact position was not found          in many of the test sequences because of sequencing          errors          As predicted using the  conserved region for          trimming and matching from the  end resulted in quicker          FastGroup analysis Table  presumably because the          conserved region increases the chance that a window will          be quickly found Aligning from the  end also increased          grouping frequency Table  possibly because the          conserved region increased the accuracy of the matching          step Because both algorithms require accurate matching          for initiation the added accuracy offered by the          conserved regions as the matching sites increased the          efficiency of grouping Even when the trimming criteria          did utilize the Bact site the presence of this site          in the sequence increased grouping efficiency For an          example of this phenomenon compare the analyses where          the sequence was trimmed by taking the first  bases          and then was matched from the  versus the  ends          Table  The presence of the conserved sequence          increased the grouping efficiency Trimming to the          Bact site also allowed smaller windows to be used          which dramatically increased grouping speed Table           Trimming sections of sequence with ambiguous bases did          not improve the sequence quality enough for accurate          grouping Table                           Comparison of the PSI and MM algorithms          As shown in Table  the MM algorithm was much faster          than PSI The sequence composition of Groups obtained          using a PSI value of  were roughly equivalent with          those obtained using a MM   The MM   did result in          some of the bigger groups being broken into two or more          smaller groups We believe that the PSI algorithm was          more appropriate for analyses of S rDNA for a number of          reasons First gaps in unedited sequences were not as          big of a problem as we initially believed We have          analyzed one bacterial S rDNA library in which  of          the sequences were grouped together using the PSI          algorithm This result would not have been obtained if          gaps were a major problem The second reason we prefer          the PSI algorithm for analyses of S rDNA is that there          are reasons to believe that bacteria with S rDNA           identity belong to closely related bacteria                                       Analyzing partial sequences to increase speed of          FastGroup analyses          With a large data set it may be desirable to speed up          the FastGroup analysis possibly by using only part of          the input sequence during grouping This approach would          only work if most of the information positions are not          lost by the truncation That is if a sequence is  bp          after trimming and only  of the sequence ie           bp is used in the Grouping step how representative are          the results It was expected that since the          hypervariable region V is immediately  of the Bact          site grouping should be much faster and representative          if matching was initiated from the  end As shown in          Table  using partial sequence does dramatically speed          up FastGroup but with a significant loss of resolution          The loss of resolution occurred even though the V region          was included in the portion of the sequence analyzed For          this reason we suggest using the longest sequence          possible                          Comparison of FastGroup with ClustalX output          ClustalX    uses the ClustalW algorithm    to          align sequences using a combination of progressive          alignment and dynamic programming making this algorithm          sensitive to divergence between closely related sequences           identity The ClustalW algorithm was used to          align the  test sequences using default parameters A          tree was generated from aligned sequences using          ClustalXs Draw Neighbor Joining NJ Tree program The          resulting tree data were plotted Figures  using          NJPLOT which was included as part of ClustalX software          distribution The average running time to produce an          alignment from  sequences was one hour and  minutes          plus an average of  minutes to generate tree data using          Draw NJ tree          FastGroup was used to group the same test sequences          using the PSI algorithm Sequences were trimmed at the           end for every N occurring within  bases and at the           end to  of the Bact site Trimmed sequences were          grouped at  PSI All other FastGroup parameters were          left at default values Run time was  seconds          The NJ tree from the ClustalX analysis is shown in          Figure  The groups from FastGroup are color coded on          the Tree Figure  In general the ClustalX Clades and          FastGroups are identical The main exception were the          FastGroups  and  which corresponds to ClustalX Clades           If the PSI is raised to  ie  bp change per           bp in FastGroup then the two major ClustalX Groups          become apparent eg Group  includes Clades  and          Group  is equivalent to Clade  The FastGroup           contain sequences that differ from FastGroup  by a one          bp gap which explains the reason that ClustalX placed          these sequences in Clade  Because this gap occurred in          all four FastGroup  sequences and not in any of the          FastGroup  sequences these two groups probably          represent different S rDNAs and possibly two bacterial          species          What other options exist for dereplicating large          libraries of S rDNA besides FastGroup One possibility          is to align the sequences with Clustal X and then use the          alignments to determine which sequences are the same          This approach is time consuming because it requires that           the sequences be trimmed individually before the          alignment and  duplicate sequences be manually removed          from the original library after the alignment Advantages          of the Clustal X approach is that visual confirmation of          grouping is easy However results can also be visualized          in FastGroup by having the program display the sequences          from the  end and looking at the groupseqstxt output          file FastGroup can also speed up alignment analysis by          rapidly trimming dereplicating and outputting sequences          to the fastagroupstxt file which is ideal for Clustal          X alignments A second possible approach to library          dereplication is to compare sequences against each other          using BLAST          httpwwwncbinlmnihgovblastblseqblhtmland then          delete duplicates This approach works well but is too          time consuming for libraries over a couple of hundred          sequences A third way that large libraries are often          dereplicated requires submitting the sequences as batch          files to a database either local or remote then          searching the same sequences against the updated database          using BLAST or Sequence Similarity          httpwwwcmemsueduRDPdocssimmatrixissueshtml          Again this method works well for a small number of          sequences but is very time intensive with large data          sets          Due to technological advances it is now possible to          cheaply sequence thousands of S rDNA per day This          change in sequencing power necessitates a reassessment of          how microbial diversity and biogeography is studied Many          of the techniques commonly used for these sorts of          studies were designed to minimize efforts and cost in the          pregenomics era      However these techniques          suffer from a number of limitations In the case of          denaturing gradient gel electrophoresis DGGE it is          essentially impossible to compare samples from one gel to          another Because the DGGE banding patterns can not be          standardized DGGE data does not represent a permanent          record of microbial diversity or biogeography In fact          to get a permanent record of what microbe each band on          the DGGE represents it is necessary to clone and sequence          the band This is costly both in time and reagents          Terminalrestriction fragment length polymorphism          TRFLP banding patterns can be standardized Therefore          TRFLP data represents a permanent record of microbial          diversity TRFLP resolution is however limited eg          it is dependent on the different restriction sites being          present and it is hard to link the TRFLP pattern to a          specific microbial species To make this connection it          is necessary to analyze clones both by TRFLP and by          sequencing In contrast S rDNA sequences allow          bacteria to be placed in taxonomical groups Ribosomal          S DNA sequences also allow the occurrence of a specific          phylotype to be documented in an unequivocal manner          This in turn will allow databases of microbial          biogeography to be constructed          Sequencing large S rDNA libraries as we have          outlined here offers the advantages of sequence data          while minimizing cost ie  sequencing reaction per          clone The disadvantages of this approach include  an          underestimation of diversity because only part of the S          rDNA locus is used  the smaller sequences  bp          are not ideal for taxonomical identification and           dirty data ie sequences with mistakes A conscious          effort should be made to save these libraries That way          if the cleaner data or larger sequences are needed in          the future the libraries can be resequenced Another          concern with this approach is that it will cost more          money than alternative methods Highthroughput          sequencing is becoming very cheap For example the Joint          Genome Institute estimates that each sequencing reaction          costs  Paul Predki personal communication          When compared to the cost of peoplepower extra          reagents and impermanence of the data of the other          approaches sequencing of S rDNA libraries is probably          already a bargain and it is only getting cheaper                            Conclusions        As highthroughput sequencing of S rDNA libraries        becomes more common data analysis becomes the bottleneck        The FastGroup program is a first generation bioinformatics        tool for analyzing these data sets It is designed for        moderately sized S rDNA libraries produced in individual        laboratories Future generations of FastGroup should be        incorporated into relational databases that link the        sequence to other relevant data eg where when how the        sequence was obtained These sorts of databases will allow        detailed analyses of microbial biogeography and diversity        to be made                    Materials and methods        FastGroup was written in Java  Unless otherwise        stated FastGroup was tested on a Compaq Armada E        Pentium III  MHz  Mb RAM running Windows         The FastGroup executable can be found as an additional file         Additional File   The dataset used in these analyses        are available as a FASTA formatted document  Additional        File  Frequently Asked Questions FAQs and instructions        for installing FastGroup are given in Additional File                The S rDNA library was constructed as previously        described     The clones in the libraries were        sequenced once from the  end using BactF ABI PRISM        BigDye Terminators on an ABIXL sequencer PE Applied        Biosystems Inc Foster City CA at the San Diego State        University Microchemical Core Facility Unedited sequence        was used in all analyses ie all sequences were        singlepass and exactly as the sequencer software ABI        Prism Sequencing Analysis v  called them        Additional file         This is the FastGroup program        Click here for file        Additional file         The bacterial S rDNA sequences that FastGroup was        tested on are included in a text document        Click here for file        Additional file         A list of FAQs for a user trying to install and execute        the FastGroup program        Click here for file            