                                 Getting Buggy Wit It             There I was late one nightin the Microsoft software factory furiously exterminating some of the skankierbugs from my areas of Outlook  our email program My skill at writingsoftware I believe is Godgiven My legendary success at squashing bugs Ibelieve is the result of my tendency to write buggy code So it was nosurprise when one of the dozens of software testers employed by the Outlook team sent me urgent email He had discovered a giant bug in my area and wasinsistent I inspect it            The firstthing you do when a tester brings you a bug is reproduce it In this casereproduction would be easy Step  Create an appointment in Outlookscalendar Step  Add a conference room to the appointment So far so goodStep  Change the date of the appointment to the year  Step  Switch tothe meeting planner page Step              Istopped reading the testers email and wrote backAlthough it was a bad bug I felt confident I could ignore it for oh years or so But Shuman the crowds chant doesnt that mean you willinglyshipped buggy software That you deliberately added to the torment of millionsof computer users who cant get their software to work Why shouldntOutlook  be able to handle appointments in specified conference rooms infuture millenniums            Wellfolks Ive got news for you Nothing is perfect and software is no exceptionTodays robust software products from Microsoft Lotus Borland Corel and allthe rest are too damn complex to be perfect How complex are they MicrosoftsWindows  operating system contains more than  million lines of code orinstructions Compare that with the  million parts in a Boeing   millionof which are fasteners such as rivets Fasteners are wonderful but they dontinteract much with one another The difficult thing about writing software isthat all  million parts of Windows  are tightly coupled Pop a rivet onyour  and youre still likely to make your destination But bollix up oneline of code in Windows  and users computer screens will turn screamingblue and crash            What are bugs anyway And what makes them moreinsidious than a few blown rivets Bugs are errors somewhat analogous to typosor factual errors in newspaper articles but the difference is that a typo isalmost never enough to spoil an entire edition of a newspaper whereas a tinyerror in a software program can scuttle it Take the year  bug for exampleThe YK bug arises because past programmers expressed years with two digitsrather than four so that the year  is written as  Thus to the computerthe year  looks the same as the year  Click to find out whyprogrammers deliberately created the YK bug and why that wasnt such a crazything to do The YK bug is a very bad bug the one tiny decision about how toexpress dates can bring a whole program to a screeching halt            Bugs fallinto two major categories crashing and functional Crashing bugs are sonaughty that they cause programs to stop functioning Usually this results infriendly warningssuch as Illegal Operation for Windows users or the lovelypicture of a bomb for Macintosh users The other type of bug is a functionalbugeg the YK bugwhich is subtler in nature Functional bugs causeprograms to fail or to give erroneous results The number of either kind of bugis proportional to the size of the program            But as Shuman can tell you its easy to write bugs intosimple short programs like one designed to find a single word in a sentenceActually its not that simple an operation You must write perfectly logicalstatements in a language that the computer can understand If you were to writethis program in C a popular programming language it would take three lines ofcode to tell the program to look at the beginning of the word and the beginningof each sentence Next youd instruct the computer to match each character inthe word you are searching for to the corresponding characters in the sentenceIf the letters are the same you continue This would take five lines of codeThen you would have to confirm you have gone through all the letters in theword successfully Chalk up two more lines Then youd need to see if there areany letters in the sentence left to compare Two lines of code Lastly youwould have to inform the user of your program what happened Another threelines lines of code to find one word Shuman is exhausted just thinkingabout it and he hasnt even started creating bugs Dropping one essentialinstruction or writing the lines of code in the wrong order could spelldestruction for my little program For all the gory details on how I actuallywrote this program in C click             Civiliansassume software companies spend most of their time writing software WrongThey spend most of their time testing software After developers write afew lines of code we test it for bugs and sit down with our testers to imagineall the ways the program will be used Good testers make gnarly demands on thecode inventing disaster scenarios worthy of Hollywood My favorite testerroutinely yanked the power cord out of the computer during Outlook operationsto see how the program handled loss of power Testers run the software ondifferent PCshow will it work on a Hewlett Packard computer vs a PackardBell They print with old printers They enter thousands of lines of text intosmall fields One tester placed most of the text of the King James Bible intoan email message sent it to himself and then replied to the email Outlookchoked at this point demanding a day of rest God was watching Here at                  Slate                we rarely tug on the power cord to test our code but we dotest the site on a variety of browsers            At the beginning of a software project code isbuggy because were still getting different parts of the program to cooperateA line of code that tells the program how to print may clash with the code thattells the program how to draw the screen As testers hunt bugs developersconspire with the marketing department to add features to the product whichbreeds more potential bugs Adding new features to a stable program can bedangerous Developers can create bugs faster than testers can capture them andtesters can capture them faster than developers can kill them so the only wayto finish a product is to stop adding features and start paying attention tothe bugs            Preventing developers from adding features is not as easy as it sounds Theylove to build thingsnot to fix things One way to deter them is to breaktheir arms with a baseball bat Given infinite time developers would prefer toadd feature upon feature and never release their product But marketing peopleare the worst offenders when it comes to wanting to add new featuresgenerating loud choruses of NO even from otherwise enthusiasticdevelopers            Agood tester is like the Roach Motel corralling bugs andensnaring them Look what I caught the tester meows as he drops the verminon the developers doorstep Testers are as vain about finding bugs as I amabout squashing them hence the excessive pride of my tester who uncovered theyear  bug            Havingfound a bug its not easy to find what caused it Where is the bad assumptionthat got us into trouble Some bugs are hell to track down One crashing bug inOutlook would reproduce only on a Gateway computer equipped with a Matrox videocard Eventually we tracked the bug down to one single line of code thatfailed because it assumed all graphics cards are created equal They arenot            Bug fixing is time consuming Developers mustreview every line of code one at a time They often deploy programs calleddebuggers which allow them to peer into the innards of the software as itruns As developers kill the bugs they incorporate the solutions into a dailybuild of the program and test the build to make certain the solutions dontcause additional bugs Outlook  went through several thousand builds beforeit was released each build bringing us infinitesimally closer toperfection            As weapproach perfection though the law of diminishing returns kicks in Are theexisting bugs fatal defects or can we live with them We developers have aname for bugs we can live with known issues By the time Outlook  wasreleased in November  I suspect I was intimate with every one of its knownissues I also suspect that  percent of all bugs reported by users tosoftware companies have already been noted and prioritized for fixing by somelatenight team of code warriors            The worst bug is a show stopper bug the bug that willcroak the entire program When a show stopper is discovered we drop everythingand find a fix But we make the absolutely smallest necessary change to killthe bug so that the other parts of the system can continue to work obliviousto the chaos around them            Developersseek a balance between its done and its perfect when writing softwareBut its difficult to know when to stop You are always only a few late nightsaway from perfection Where refining a  is shall we say somewhat involvedsoftware writing is powered on caffeine and little more In fact oneenterprising young developer strung out on Mountain Dew eventually fixed theyear  bug in Outlook  making it safe for everyone making appointments inthe next several millenniums                           If youmissed our links in the article click to read about why programmers createdthe YK bug and for a simple program in C                              